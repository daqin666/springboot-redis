0.启动类增加启动注解
    @EnableCaching //开启全局注解缓存

1.存储缓存
    使用 @Cacheable 注解实现缓存的存储和读取，并搭配以下连个属性一起使用
        value： 这个参数是必须要的，是存储缓存数据的包名。
        key： 可选。要使用SpEL表达式（"#参数名"表示你要进行缓存的参数，对应方法的形参，"+"是参数之间的分割符），
        这就表明了你要缓存的数据的 key 值是什么（对应的 value 就是方法的返回值）。
        // @Cacheable将查询结果进行缓存


2.读取缓存
    实际上读取和存储缓存都是一样的代码，当第一次存储缓存后，再次调用此方法时，就不会调用此方法了，而是直接拿到缓存的数据填充到方法
    对应的参数中，接着直接执行 return 语句。
    怎么证明上述过程呢？再执行一遍刚刚存储（读取）缓存的代码即可，因为刚刚我在代码中加上了打印代码，如果执行了方法，
    就会打印信息到控制台上，如果是直接从缓存中读取代码，就不会打印信息到控制台上。

3.更新缓存
    使用注解 @CachePut 即可将当前方法的返回值通过对应的 key 更新到缓存中，类似于 java 中 HashMap 的 put 方法，
    如果当前不存在这个 key，则新增键值对，若存在，则更新对应的 value 值。

4.删除缓存
    使用 @CacheEvict 即可 根据 key 值删除缓存



